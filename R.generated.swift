//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Xcode.gitignore`.
    static let xcodeGitignore = Rswift.FileResource(bundle: R.hostingBundle, name: "Xcode", pathExtension: "gitignore")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Xcode", withExtension: "gitignore")`
    static func xcodeGitignore(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xcodeGitignore
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `Checked`.
    static let checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checked")
    /// Image `Folder Icon`.
    static let folderIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Folder Icon")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `User Placeholder`.
    static let userPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "User Placeholder")
    
    /// `UIImage(named: "Checked", bundle: ..., traitCollection: ...)`
    static func checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Folder Icon", bundle: ..., traitCollection: ...)`
    static func folderIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "User Placeholder", bundle: ..., traitCollection: ...)`
    static func userPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userPlaceholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddAlbumTableViewCell`.
    static let addAlbumTableViewCell: Rswift.ReuseIdentifier<AddAlbumTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddAlbumTableViewCell")
    /// Reuse identifier `AddTopicTableViewCell`.
    static let addTopicTableViewCell: Rswift.ReuseIdentifier<AddTopicTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddTopicTableViewCell")
    /// Reuse identifier `AddUsersTableViewCell`.
    static let addUsersTableViewCell: Rswift.ReuseIdentifier<AddUsersTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddUsersTableViewCell")
    /// Reuse identifier `AlbumTableViewCell`.
    static let albumTableViewCell: Rswift.ReuseIdentifier<AlbumTableViewCell> = Rswift.ReuseIdentifier(identifier: "AlbumTableViewCell")
    /// Reuse identifier `EmptyListAlbumsTableViewCell`.
    static let emptyListAlbumsTableViewCell: Rswift.ReuseIdentifier<EmptyListAlbumsTableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyListAlbumsTableViewCell")
    /// Reuse identifier `EmptyTableViewCell`.
    static let emptyTableViewCell: Rswift.ReuseIdentifier<EmptyTableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyTableViewCell")
    /// Reuse identifier `EmptyUsersListTableViewCell`.
    static let emptyUsersListTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyUsersListTableViewCell")
    /// Reuse identifier `LabelCollectionViewCell`.
    static let labelCollectionViewCell: Rswift.ReuseIdentifier<LabelItemCell> = Rswift.ReuseIdentifier(identifier: "LabelCollectionViewCell")
    /// Reuse identifier `PhotoCollectionViewCell`.
    static let photoCollectionViewCell: Rswift.ReuseIdentifier<PhotoItemCell> = Rswift.ReuseIdentifier(identifier: "PhotoCollectionViewCell")
    /// Reuse identifier `TopicTableViewCell`.
    static let topicTableViewCell: Rswift.ReuseIdentifier<TopicTableViewCell> = Rswift.ReuseIdentifier(identifier: "TopicTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 10 view controllers.
  struct segue {
    /// This struct is generated for `AddTopicViewController`, and contains static references to 1 segues.
    struct addTopicViewController {
      /// Segue identifier `segueToAddUser`.
      static let segueToAddUser: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddTopicViewController, AddUsersTopicViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAddUser")
      
      /// Optionally returns a typed version of segue `segueToAddUser`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAddUser(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddTopicViewController, AddUsersTopicViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addTopicViewController.segueToAddUser, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AlbumListViewController`, and contains static references to 4 segues.
    struct albumListViewController {
      /// Segue identifier `segueToAddAlbum`.
      static let segueToAddAlbum: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlbumListViewController, AddAlbumViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAddAlbum")
      /// Segue identifier `segueToGallery`.
      static let segueToGallery: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlbumListViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToGallery")
      /// Segue identifier `segueToInfoTopic`.
      static let segueToInfoTopic: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlbumListViewController, InfoTopicViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToInfoTopic")
      /// Segue identifier `segueToSchiavo`.
      static let segueToSchiavo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlbumListViewController, PhotoCollectionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToSchiavo")
      /// Segue identifier `segueToTopicDetails`.
      static let segueToTopicDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AlbumListViewController, InfoTopicViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToTopicDetails")
      
      /// Optionally returns a typed version of segue `segueToAddAlbum`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAddAlbum(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlbumListViewController, AddAlbumViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.albumListViewController.segueToAddAlbum, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToGallery`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToGallery(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlbumListViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.albumListViewController.segueToGallery, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToSchiavo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToSchiavo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlbumListViewController, PhotoCollectionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.albumListViewController.segueToSchiavo, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToTopicDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToTopicDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AlbumListViewController, InfoTopicViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.albumListViewController.segueToTopicDetails, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `InfoTopicViewController`, and contains static references to 1 segues.
    struct infoTopicViewController {
      /// Segue identifier `segueToEditMembers`.
      static let segueToEditMembers: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfoTopicViewController, AddUsersTopicViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToEditMembers")
      
      /// Optionally returns a typed version of segue `segueToEditMembers`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToEditMembers(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfoTopicViewController, AddUsersTopicViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infoTopicViewController.segueToEditMembers, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `segueToOptions`.
      static let segueToOptions: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, ViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToOptions")
      
      /// Optionally returns a typed version of segue `segueToOptions`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToOptions(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, ViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.segueToOptions, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PhotoCollectionViewController`, and contains static references to 2 segues.
    struct photoCollectionViewController {
      /// Segue identifier `segueToAddPhoto`.
      static let segueToAddPhoto: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PhotoCollectionViewController, AddPhotoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAddPhoto")
      /// Segue identifier `segueToAlbumDetails`.
      static let segueToAlbumDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PhotoCollectionViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAlbumDetails")
      
      /// Optionally returns a typed version of segue `segueToAddPhoto`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAddPhoto(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PhotoCollectionViewController, AddPhotoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.photoCollectionViewController.segueToAddPhoto, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToAlbumDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAlbumDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PhotoCollectionViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.photoCollectionViewController.segueToAlbumDetails, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegisterViewController`, and contains static references to 1 segues.
    struct registerViewController {
      /// Segue identifier `segueToAdditionalData`.
      static let segueToAdditionalData: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAdditionalData")
      
      /// Optionally returns a typed version of segue `segueToAdditionalData`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAdditionalData(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.segueToAdditionalData, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SaveViewController`, and contains static references to 1 segues.
    struct saveViewController {
      /// Segue identifier `segueToOptions`.
      static let segueToOptions: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SaveViewController, ViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToOptions")
      
      /// Optionally returns a typed version of segue `segueToOptions`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToOptions(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SaveViewController, ViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.saveViewController.segueToOptions, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `StartViewController`, and contains static references to 2 segues.
    struct startViewController {
      /// Segue identifier `toLoginSegue`.
      static let toLoginSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, StartViewController, LoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toLoginSegue")
      /// Segue identifier `toRegisterSegue`.
      static let toRegisterSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, StartViewController, RegisterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toRegisterSegue")
      
      /// Optionally returns a typed version of segue `toLoginSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toLoginSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, StartViewController, LoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.startViewController.toLoginSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toRegisterSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toRegisterSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, StartViewController, RegisterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.startViewController.toRegisterSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TopicListViewController`, and contains static references to 3 segues.
    struct topicListViewController {
      /// Segue identifier `segueToAccount`.
      static let segueToAccount: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TopicListViewController, AccountViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAccount")
      /// Segue identifier `segueToAddTopic`.
      static let segueToAddTopic: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TopicListViewController, AddTopicViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAddTopic")
      /// Segue identifier `segueToAlbums`.
      static let segueToAlbums: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TopicListViewController, AlbumListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToAlbums")
      
      /// Optionally returns a typed version of segue `segueToAccount`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAccount(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TopicListViewController, AccountViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.topicListViewController.segueToAccount, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToAddTopic`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAddTopic(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TopicListViewController, AddTopicViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.topicListViewController.segueToAddTopic, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToAlbums`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToAlbums(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TopicListViewController, AlbumListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.topicListViewController.segueToAlbums, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ViewController`, and contains static references to 2 segues.
    struct viewController {
      /// Segue identifier `segueToLogin`.
      static let segueToLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToLogin")
      /// Segue identifier `segueToMain`.
      static let segueToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToMain")
      
      /// Optionally returns a typed version of segue `segueToLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.segueToLogin, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.segueToMain, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `AlbumStoryboard`.
    static let albumStoryboard = _R.storyboard.albumStoryboard()
    /// Storyboard `Authentication`.
    static let authentication = _R.storyboard.authentication()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainStoryboard`.
    static let mainStoryboard = _R.storyboard.mainStoryboard()
    /// Storyboard `WhiteStoryboard`.
    static let whiteStoryboard = _R.storyboard.whiteStoryboard()
    
    /// `UIStoryboard(name: "AlbumStoryboard", bundle: ...)`
    static func albumStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.albumStoryboard)
    }
    
    /// `UIStoryboard(name: "Authentication", bundle: ...)`
    static func authentication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authentication)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainStoryboard", bundle: ...)`
    static func mainStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainStoryboard)
    }
    
    /// `UIStoryboard(name: "WhiteStoryboard", bundle: ...)`
    static func whiteStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.whiteStoryboard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 51 localization keys.
    struct localizable {
      /// en translation: Account
      /// 
      /// Locales: en, it
      static let kNavBarAccountButton = Rswift.StringResource(key: "kNavBarAccountButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Account
      /// 
      /// Locales: en, it
      static let kNavBarAccountTitle = Rswift.StringResource(key: "kNavBarAccountTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Add Album
      /// 
      /// Locales: en, it
      static let kAddAlbumButton = Rswift.StringResource(key: "kAddAlbumButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Add Topic
      /// 
      /// Locales: en, it
      static let kAddTopicButton = Rswift.StringResource(key: "kAddTopicButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Add User
      /// 
      /// Locales: en, it
      static let kAddUserTopic = Rswift.StringResource(key: "kAddUserTopic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Admin
      /// 
      /// Locales: en, it
      static let kSwitchAdmin = Rswift.StringResource(key: "kSwitchAdmin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: An e-mail was sent to your Account
      /// 
      /// Locales: en, it
      static let kAlertMessageEmailSent = Rswift.StringResource(key: "kAlertMessageEmailSent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, it
      static let kNavBarBackMessage = Rswift.StringResource(key: "kNavBarBackMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, it
      static let kAlertCancelButton = Rswift.StringResource(key: "kAlertCancelButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Complete SignUp
      /// 
      /// Locales: en, it
      static let kFinischSignUpButton = Rswift.StringResource(key: "kFinischSignUpButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Confirm Password
      /// 
      /// Locales: en, it
      static let kSignUpConfirmPasswordTextField = Rswift.StringResource(key: "kSignUpConfirmPasswordTextField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Copyright (c) 2018 ITS - All Rights Reserved
      /// 
      /// Locales: en, it
      static let kCopyright = Rswift.StringResource(key: "kCopyright", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Delete Topic
      /// 
      /// Locales: en, it
      static let kDetailButtonDeleteTopic = Rswift.StringResource(key: "kDetailButtonDeleteTopic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Description
      /// 
      /// Locales: en, it
      static let kDetailLabelDescription = Rswift.StringResource(key: "kDetailLabelDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Description
      /// 
      /// Locales: en, it
      static let kNewTopicDescription = Rswift.StringResource(key: "kNewTopicDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en, it
      static let kDetailNavBarsTitle = Rswift.StringResource(key: "kDetailNavBarsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en, it
      static let kNavBarTopicDetails = Rswift.StringResource(key: "kNavBarTopicDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: E-Mail
      /// 
      /// Locales: en, it
      static let kAlertEmailTextField = Rswift.StringResource(key: "kAlertEmailTextField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: E-Mail
      /// 
      /// Locales: en, it
      static let kLoginEmailTextField = Rswift.StringResource(key: "kLoginEmailTextField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: E-Mail
      /// 
      /// Locales: en, it
      static let kSignUpEmailTextField = Rswift.StringResource(key: "kSignUpEmailTextField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, it
      static let kAlertErrorTitle = Rswift.StringResource(key: "kAlertErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, it
      static let kNavBarBackToHome = Rswift.StringResource(key: "kNavBarBackToHome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, it
      static let kNavBarTopicHomeTitle = Rswift.StringResource(key: "kNavBarTopicHomeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Insert your Data
      /// 
      /// Locales: en, it
      static let kNavBarFinishSignUpTitle = Rswift.StringResource(key: "kNavBarFinishSignUpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en
      static let kNavBarLoginTitle = Rswift.StringResource(key: "kNavBarLoginTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, it
      static let kLoginButton = Rswift.StringResource(key: "kLoginButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, it
      static let kNavBarAccountLogout = Rswift.StringResource(key: "kNavBarAccountLogout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, it
      static let kFinishSignUpName = Rswift.StringResource(key: "kFinishSignUpName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, it
      static let kSignUpNextButton = Rswift.StringResource(key: "kSignUpNextButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Nothing to display...
      /// 
      /// Locales: en, it
      static let kNoTopicLabel = Rswift.StringResource(key: "kNoTopicLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en, it
      static let kAlertErrorOkButton = Rswift.StringResource(key: "kAlertErrorOkButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, it
      static let kLoginPasswordField = Rswift.StringResource(key: "kLoginPasswordField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, it
      static let kSignUpPasswordField = Rswift.StringResource(key: "kSignUpPasswordField", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Reset Password
      /// 
      /// Locales: en, it
      static let kAlertResetPasswordTitle = Rswift.StringResource(key: "kAlertResetPasswordTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Reset Password
      /// 
      /// Locales: en, it
      static let kResetPasswordButton = Rswift.StringResource(key: "kResetPasswordButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, it
      static let kAccountSaveButton = Rswift.StringResource(key: "kAccountSaveButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en, it
      static let kDetailNavBarSaveButton = Rswift.StringResource(key: "kDetailNavBarSaveButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Search Album
      /// 
      /// Locales: en, it
      static let kSearchBarAlbum = Rswift.StringResource(key: "kSearchBarAlbum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Search Here
      /// 
      /// Locales: en, it
      static let kSearchBarPlaceholder = Rswift.StringResource(key: "kSearchBarPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Search Members
      /// 
      /// Locales: en, it
      static let kDetailSearchBarMembers = Rswift.StringResource(key: "kDetailSearchBarMembers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, it
      static let kAlertSendButton = Rswift.StringResource(key: "kAlertSendButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: ShotWorkers
      /// 
      /// Locales: en, it
      static let kTitleApp = Rswift.StringResource(key: "kTitleApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: SignUp
      /// 
      /// Locales: en, it
      static let kNavBarSignUpTitle = Rswift.StringResource(key: "kNavBarSignUpTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: SignUp
      /// 
      /// Locales: en, it
      static let kSignUpButton = Rswift.StringResource(key: "kSignUpButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Surname
      /// 
      /// Locales: en, it
      static let kFinischSignUpSurname = Rswift.StringResource(key: "kFinischSignUpSurname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: The password is invalid or the user does not have a passoword
      /// 
      /// Locales: en, it
      static let kAlertErrorPasswordMessage = Rswift.StringResource(key: "kAlertErrorPasswordMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: There is no user record corresponding to this identifier. The user may have been deleted.
      /// 
      /// Locales: en, it
      static let kAlertErrorNoUserMessage = Rswift.StringResource(key: "kAlertErrorNoUserMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Title
      /// 
      /// Locales: en, it
      static let kNewTopicTitle = Rswift.StringResource(key: "kNewTopicTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Type your e-mail
      /// 
      /// Locales: en, it
      static let kAlertResetPasswordMessage = Rswift.StringResource(key: "kAlertResetPasswordMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Welcome, 
      /// 
      /// Locales: en, it
      static let kWelcomeLabel = Rswift.StringResource(key: "kWelcomeLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// it translation: Accedi
      /// 
      /// Locales: it
      static let kLoginTitle = Rswift.StringResource(key: "kLoginTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      
      /// en translation: Account
      /// 
      /// Locales: en, it
      static func kNavBarAccountButton(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarAccountButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account
      /// 
      /// Locales: en, it
      static func kNavBarAccountTitle(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarAccountTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Album
      /// 
      /// Locales: en, it
      static func kAddAlbumButton(_: Void = ()) -> String {
        return NSLocalizedString("kAddAlbumButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Topic
      /// 
      /// Locales: en, it
      static func kAddTopicButton(_: Void = ()) -> String {
        return NSLocalizedString("kAddTopicButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add User
      /// 
      /// Locales: en, it
      static func kAddUserTopic(_: Void = ()) -> String {
        return NSLocalizedString("kAddUserTopic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Admin
      /// 
      /// Locales: en, it
      static func kSwitchAdmin(_: Void = ()) -> String {
        return NSLocalizedString("kSwitchAdmin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: An e-mail was sent to your Account
      /// 
      /// Locales: en, it
      static func kAlertMessageEmailSent(_: Void = ()) -> String {
        return NSLocalizedString("kAlertMessageEmailSent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, it
      static func kNavBarBackMessage(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarBackMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, it
      static func kAlertCancelButton(_: Void = ()) -> String {
        return NSLocalizedString("kAlertCancelButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Complete SignUp
      /// 
      /// Locales: en, it
      static func kFinischSignUpButton(_: Void = ()) -> String {
        return NSLocalizedString("kFinischSignUpButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm Password
      /// 
      /// Locales: en, it
      static func kSignUpConfirmPasswordTextField(_: Void = ()) -> String {
        return NSLocalizedString("kSignUpConfirmPasswordTextField", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copyright (c) 2018 ITS - All Rights Reserved
      /// 
      /// Locales: en, it
      static func kCopyright(_: Void = ()) -> String {
        return NSLocalizedString("kCopyright", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete Topic
      /// 
      /// Locales: en, it
      static func kDetailButtonDeleteTopic(_: Void = ()) -> String {
        return NSLocalizedString("kDetailButtonDeleteTopic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Description
      /// 
      /// Locales: en, it
      static func kDetailLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("kDetailLabelDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Description
      /// 
      /// Locales: en, it
      static func kNewTopicDescription(_: Void = ()) -> String {
        return NSLocalizedString("kNewTopicDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en, it
      static func kDetailNavBarsTitle(_: Void = ()) -> String {
        return NSLocalizedString("kDetailNavBarsTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en, it
      static func kNavBarTopicDetails(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarTopicDetails", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: E-Mail
      /// 
      /// Locales: en, it
      static func kAlertEmailTextField(_: Void = ()) -> String {
        return NSLocalizedString("kAlertEmailTextField", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: E-Mail
      /// 
      /// Locales: en, it
      static func kLoginEmailTextField(_: Void = ()) -> String {
        return NSLocalizedString("kLoginEmailTextField", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: E-Mail
      /// 
      /// Locales: en, it
      static func kSignUpEmailTextField(_: Void = ()) -> String {
        return NSLocalizedString("kSignUpEmailTextField", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, it
      static func kAlertErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("kAlertErrorTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, it
      static func kNavBarBackToHome(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarBackToHome", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, it
      static func kNavBarTopicHomeTitle(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarTopicHomeTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insert your Data
      /// 
      /// Locales: en, it
      static func kNavBarFinishSignUpTitle(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarFinishSignUpTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en
      static func kNavBarLoginTitle(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarLoginTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, it
      static func kLoginButton(_: Void = ()) -> String {
        return NSLocalizedString("kLoginButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, it
      static func kNavBarAccountLogout(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarAccountLogout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, it
      static func kFinishSignUpName(_: Void = ()) -> String {
        return NSLocalizedString("kFinishSignUpName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, it
      static func kSignUpNextButton(_: Void = ()) -> String {
        return NSLocalizedString("kSignUpNextButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nothing to display...
      /// 
      /// Locales: en, it
      static func kNoTopicLabel(_: Void = ()) -> String {
        return NSLocalizedString("kNoTopicLabel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en, it
      static func kAlertErrorOkButton(_: Void = ()) -> String {
        return NSLocalizedString("kAlertErrorOkButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, it
      static func kLoginPasswordField(_: Void = ()) -> String {
        return NSLocalizedString("kLoginPasswordField", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, it
      static func kSignUpPasswordField(_: Void = ()) -> String {
        return NSLocalizedString("kSignUpPasswordField", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset Password
      /// 
      /// Locales: en, it
      static func kAlertResetPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("kAlertResetPasswordTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset Password
      /// 
      /// Locales: en, it
      static func kResetPasswordButton(_: Void = ()) -> String {
        return NSLocalizedString("kResetPasswordButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, it
      static func kAccountSaveButton(_: Void = ()) -> String {
        return NSLocalizedString("kAccountSaveButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en, it
      static func kDetailNavBarSaveButton(_: Void = ()) -> String {
        return NSLocalizedString("kDetailNavBarSaveButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search Album
      /// 
      /// Locales: en, it
      static func kSearchBarAlbum(_: Void = ()) -> String {
        return NSLocalizedString("kSearchBarAlbum", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search Here
      /// 
      /// Locales: en, it
      static func kSearchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("kSearchBarPlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search Members
      /// 
      /// Locales: en, it
      static func kDetailSearchBarMembers(_: Void = ()) -> String {
        return NSLocalizedString("kDetailSearchBarMembers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, it
      static func kAlertSendButton(_: Void = ()) -> String {
        return NSLocalizedString("kAlertSendButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ShotWorkers
      /// 
      /// Locales: en, it
      static func kTitleApp(_: Void = ()) -> String {
        return NSLocalizedString("kTitleApp", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SignUp
      /// 
      /// Locales: en, it
      static func kNavBarSignUpTitle(_: Void = ()) -> String {
        return NSLocalizedString("kNavBarSignUpTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SignUp
      /// 
      /// Locales: en, it
      static func kSignUpButton(_: Void = ()) -> String {
        return NSLocalizedString("kSignUpButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Surname
      /// 
      /// Locales: en, it
      static func kFinischSignUpSurname(_: Void = ()) -> String {
        return NSLocalizedString("kFinischSignUpSurname", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The password is invalid or the user does not have a passoword
      /// 
      /// Locales: en, it
      static func kAlertErrorPasswordMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertErrorPasswordMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There is no user record corresponding to this identifier. The user may have been deleted.
      /// 
      /// Locales: en, it
      static func kAlertErrorNoUserMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertErrorNoUserMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Title
      /// 
      /// Locales: en, it
      static func kNewTopicTitle(_: Void = ()) -> String {
        return NSLocalizedString("kNewTopicTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Type your e-mail
      /// 
      /// Locales: en, it
      static func kAlertResetPasswordMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertResetPasswordMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome, 
      /// 
      /// Locales: en, it
      static func kWelcomeLabel(_: Void = ()) -> String {
        return NSLocalizedString("kWelcomeLabel", bundle: R.hostingBundle, comment: "")
      }
      
      /// it translation: Accedi
      /// 
      /// Locales: it
      static func kLoginTitle(_: Void = ()) -> String {
        return NSLocalizedString("kLoginTitle", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try albumStoryboard.validate()
      try authentication.validate()
      try whiteStoryboard.validate()
      try mainStoryboard.validate()
    }
    
    struct albumStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let album = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Album")
      let bundle = R.hostingBundle
      let name = "AlbumStoryboard"
      let schiavo = StoryboardViewControllerResource<PhotoCollectionViewController>(identifier: "Schiavo")
      
      func album(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: album)
      }
      
      func schiavo(_: Void = ()) -> PhotoCollectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: schiavo)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "User Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User Placeholder' is used in storyboard 'AlbumStoryboard', but couldn't be loaded.") }
        if _R.storyboard.albumStoryboard().album() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'album' could not be loaded from storyboard 'AlbumStoryboard' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.albumStoryboard().schiavo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'schiavo' could not be loaded from storyboard 'AlbumStoryboard' as 'PhotoCollectionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct authentication: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Authentication"
      let saveViewController = StoryboardViewControllerResource<SaveViewController>(identifier: "SaveViewController")
      
      func saveViewController(_: Void = ()) -> SaveViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: saveViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User Placeholder' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if _R.storyboard.authentication().saveViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'saveViewController' could not be loaded from storyboard 'Authentication' as 'SaveViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mainStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "MainStoryboard"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Folder Icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Folder Icon' is used in storyboard 'MainStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User Placeholder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User Placeholder' is used in storyboard 'MainStoryboard', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct whiteStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "WhiteStoryboard"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if _R.storyboard.whiteStoryboard().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'WhiteStoryboard' as 'ViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
